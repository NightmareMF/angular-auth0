name: Node.js CI

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.20.3]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
    - run: npm ci
    - run: npm run build --if-present

    # Install dependencies for running headless Chrome
    - name: Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          fonts-liberation \
          libappindicator3-1 \
          libasound2-dev \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libcups2 \
          libdbus-1-3 \
          libgdk-pixbuf2.0-0 \
          libnspr4 \
          libnss3 \
          libx11-xcb1 \
          libxcomposite1 \
          libxrandr2 \
          xdg-utils

    # Run tests with headless Chrome
    - name: Run tests
      run: |
        npm test -- --watch=false --browsers=ChromeHeadless

    # Docker build and push
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/web-app-authentication:latest .

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/web-app-authentication:latest

        - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/web-app-authentication:latest
            docker stop web-app || true
            docker rm web-app || true
            docker run -d --name web-app -p 80:80 -p 443:443 ${{ secrets.DOCKER_USERNAME }}/web-app-authentication:latest
